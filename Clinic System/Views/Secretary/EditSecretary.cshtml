@model User

<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>نموذج التسجيل</title>

	<!-- Styles for the form and phone numbers -->
	<style>
		.validation-message {
			color: red;
			display: none;
		}

		.phone-number-group {
			display: flex;
			gap: 10px;
			margin-bottom: 10px;
		}

			.phone-number-group input {
				flex-grow: 1;
				padding: 0.5em;
				border: 1px solid #ccc;
				border-radius: 5px;
			}

		.remove-phone-btn {
			cursor: pointer;
			color: white;
		}

		.btnadd {
			--bg: #e74c3c;
			--text-color: #fff;
			position: relative;
			width: 280px;
			border: none;
			background: linear-gradient(to top, #00154c, #12376e, #23487f);
			color: var(--text-color);
			padding: 1em;
			font-weight: bold;
			text-transform: uppercase;
			transition: 0.2s;
			border-radius: 5px;
			opacity: 0.8;
			letter-spacing: 1px;
		}

			.btnadd:hover {
				opacity: 1;
			}

			.btnadd:active {
				top: 4px;
			}
	</style>
</head>
<body>
	<div class="container mt-5">
		<h2>تعديل بيانات الموظف</h2>
		<form id="registrationForm" asp-controller="Secretary" asp-action="EditSecretary" method="post" enctype="multipart/form-data">
			<div class="mb-3">
				<label for="fullName" class="form-label">الاسم الكامل</label>
				<input type="text" asp-for="FullName" class="form-control" id="fullName">
				<span asp-validation-for="FullName" class="text-danger"></span>
			</div>

			<div class="mb-3">
				<label for="email" class="form-label">البريد الإلكتروني</label>
				<input type="email" asp-for="Email" class="form-control" id="email">
				<span asp-validation-for="Email" class="text-danger"></span>
			</div>

			<div class="mb-3">
				<label for="password" class="form-label">كلمة المرور</label>
				<input type="password" asp-for="PasswordHash" class="form-control" id="password">
				<div class="validation-message" id="passwordValidation">كلمة المرور مطلوبة.</div>
			</div>

			<!-- Phone numbers input fields with add and remove buttons -->
			<div class="phone-number-wrapper mb-3">
				<label class="form-label">أرقام الهاتف</label>
				<div id="phoneNumbers">
					@{
						var phoneCount = Model.userPhoneNumbers.Count;
						var phs = (Model.userPhoneNumbers).ToList();
						for (int i = 0; i < phoneCount; i++)
						{
							var phoneNumber = phs[i].PhoneNumber;
							<div class="input-group mb-2">
								<input type="text" name="phones[@i].PhoneNumber" class="form-control phone-input" placeholder="رقم الهاتف" value="@phoneNumber" required />
								@{
									if (i == 0)
									{
										<button class="btn btn-secondary add-phone-btn" type="button">إضافة</button>

									}
									else
									{
										<button class="btn btn-danger remove-phone" type="button">إزالة</button>
									}
								}
							</div>
						}
					}
					<div class="validation-message" id="phoneValidation" style="display: none; color: red;">
						يجب أن يكون رقم الهاتف 11 رقمًا ويحتوي على أرقام فقط.
					</div>
				</div>
			</div>
			<div style="text-align: center;">
				<button type="submit" class="btnadd">تعديل</button>
			</div>
		</form>
	</div>

	<script>
		document.addEventListener('DOMContentLoaded', function () {
			document.addEventListener('click', function (event) {
				if (event.target && event.target.classList.contains('remove-phone')) {
					// Get the parent input group and remove it
					var inputGroup = event.target.closest('.input-group');
					if (inputGroup) {
						inputGroup.remove();
					}
				}
			});
		});
		document.querySelector('.add-phone-btn').addEventListener('click', function () {
			var phoneNumberWrapper = document.querySelector('.phone-number-wrapper');
			let phoneCount = @Model.userPhoneNumbers.Count;

			// Create a new phone input field
			var newPhoneGroup = document.createElement('div');
			newPhoneGroup.className = 'phone-number-group';
			var phoneInput = document.createElement('input');
			phoneInput.type = 'text';
			phoneInput.name = `phones[${phoneCount}].PhoneNumber`;
			phoneInput.placeholder = 'رقم الهاتف';
			phoneInput.className = 'phone-input';
			phoneInput.required = true;

			newPhoneGroup.appendChild(phoneInput);
			phoneCount++;

			var removeBtn = document.createElement('span');
			removeBtn.className = 'btn btn-danger remove-phone-btn';
			removeBtn.textContent = 'إزالة';

			newPhoneGroup.appendChild(removeBtn);

			phoneNumberWrapper.appendChild(newPhoneGroup);

			// Add event listener for removing phone numbers
			removeBtn.addEventListener('click', function () {
				this.parentNode.remove();
			});
			phoneInput.addEventListener('input', function () {
				validatePhoneNumber(this);
			});
		});

		// Function to validate phone number
		function validatePhoneNumber(phoneInput) {
			var phoneRegex = /^[0-9]{11}$/;
			var phoneValidationMessage = document.getElementById('phoneValidation');
			if (!phoneRegex.test(phoneInput.value)) {
				phoneValidationMessage.style.display = 'block';
				return false;
			} else {
				phoneValidationMessage.style.display = 'none';
				return true;
			}
		}


		// Validate inputs in real-time
		document.getElementById('registrationForm').addEventListener('submit', function (event) {
			var isValid = true;

			// Validate phone numbers
			document.querySelectorAll('.phone-input').forEach(function (phoneInput) {
				if (!validatePhoneNumber(phoneInput)) {
					isValid = false;
				}
			});
			if (!isValid) {
				event.preventDefault(); // Prevent form submission if validation fails
			}
		});
	</script>

	@section Scripts {
		@{
			await Html.RenderPartialAsync("_ValidationScriptsPartial");
		}
	}
</body>
</html>
